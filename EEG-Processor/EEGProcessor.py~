"""
This model takes in an eeg signal and processes it using wavelet transforms and Fast Fourier Transforms. then it tries to identify it using machine learnings.
"""
import pywt
import numpy as np
import csv
import machineLearning as ml

class EEGProcess:

    def __init__(self):
        self.X = []
        self.Y = []
        self.algorithm = None
        

    def fileOpen(self):
        """
        Input: NA
        Returns: NA
        Description: Reads parameters from file and use them to set up the LDA and NNM and reads the processed training data from a file.
        """
        #Getting Xdata
        z = []
        w = []
        xdatafile = open('letterXData.csv', 'r')
        reader = csv.reader(xdatafile)
        
        for row in reader:
                for col in row:
                    z.append(float(col))
                w.append(z)
                z = []
        self.X = np.array(w)
        xdatafile.close()
    
    
        #Getting Ydata      
        q = []
        ydatafile= open('letterYData.csv', 'r')
        reader = csv.reader(ydatafile)
        
        for row in reader:
                for col in row:
                    q.append(col)
        self.Y = np.array(q)
        ydatafile.close()
        

    def signalProcess(self, s):
        """
        Input: s
        s (Float Array): the signal data from a single node to be processed.
        Returns: The signal information broken into the 5 respective brain waves.
        Description: This function will use a 4-level Discrete Wavelet Transform then does a Fast Fourier Transform in the data received from the DWT on the input signal.
        """
        
        cA4, cD4, cD3, cD2, cD1 = pywt.wavedec(s, 'db4', level = 4)
        beta = np.fft.fft(cD1)
        alpha = np.fft.fft(cD2)
        theta = np.fft.fft(cD3)
        delta = np.fft.fft(cD4)
        batd = np.concatenate([beta,alpha,theta,delta])
        return batd
        

    def signalFormat(self, s):
        """
        Input: s
        s (Float Array): The Data Set of sampled signals from the EEG
        Returns: An array of wavelet transformed signals
        Description: Formats the signal into 64 arrays and sends each array through the signalProcess method and the output of that is then put all into one giant array.
        """
        concatArray = []
    
        for x in s:
            concatArray = np.concatenate([concatArray,signalProcess(x)])
                
        return [concatArray]
        

    def evaluateRaw(self, s):
        """
        Input: s
        s (Array): A chunk of signal data from all nodes to be evaulated.
        Returns: Whether the left or right side was thought about or neither.
        Description: Formats the input and sends it through a SVM, NNM for analysis and returns the conclusion.
        """
        s = signalFormat(s)
        algo = self.algorithm
        predict = False
        if algo is None:
            return "No data has been learned to predict an answer"
        elif(algo == "SVM"):
            ans = ml.SVMpredict(s)
            predict = True
        elif(algo == "LDA"):
            ans = ml.LDApredict(s)
            predict = True
        elif(algo == "QDA"):
            ans = ml.QDApredict(s)
            predict = True

        if predict is True:
            self.X = np.append(self.X, [s], axis=0)
            self.Y = np.append(self.Y, ans, axis=0)
                
        return ans[0]


    def learnRaw(self, s, y, algo):
        """
        Input: s, y
        s (Array): A set of data to add to the training data
        y : What kind of data to add to help the training model
        algo (String): The machine learning algorithm to train with the data
        Return: NA
        Description: Adds new data to the training data and retrains the model.
        """
        data = []
        for d in s:
            sig = signalFormat(d)
            data.append(d)
        self.X = np.array(data)
        self.Y = y
        
        if(algo == "SVM"):
            self.algorithm = algo
            ml.SVMfit(self.X, self.Y)
        elif(algo == "LDA"):
            self.algorithm = algo
            ml.LDAfit(self.X, self.Y)
        elif(algo == "QDA"):
            self.algorithm = algo
            ml.QDAfit(self.X, self.Y)
        else:
            return "Please choose one of the implemented algorithms"

        Y.append(y)
    

    def learnFiltered(self, s, y, algo):
        """
        Input: s, y
        s (Array): A set of data to add to the training data
        y : What kind of data to add to help the training model
        algo (String): The machine learning algorithm to train with the data
        Return: NA
        Description: Adds new data to the training data and retrains the model.
        """
        self.X = s
        self.Y = y
        
        if(algo == "SVM"):
            self.algorithm = algo
            ml.SVMfit(self.X, self.Y)
        elif(algo == "LDA"):
            self.algorithm = algo
            ml.LDAfit(self.X, self.Y)
        elif(algo == "QDA"):
            self.algorithm = algo
            ml.QDAfit(self.X, self.Y)
        else:
            return "Please choose one of the implemented algorithms"
    
        
        
    def evaluateFiltered(self, s):
        """
        Input: s
        s (Array): A chunk of signal data from all nodes to be evaulated.
        Returns: Whether the left or right side was thought about or neither.
        Description: Formats the input and sends it through a SVM, NNM for analysis and returns the conclusion.
        """
        algo = self.algorithm
        predict = False
        if algo is None:
            return "No data has been learned to predict an answer"
        elif(algo == "SVM"):
            ans = ml.SVMpredict(s)
            predict = True
        elif(algo == "LDA"):
            ans = ml.LDApredict(s)
            predict = True
        elif(algo == "QDA"):
            ans = ml.QDApredict(s)
            predict = True
    
        if predict is True:
            self.X = np.append(self.X, [s], axis=0)
            self.Y = np.append(self.Y, ans, axis=0)
                    
        return ans[0]
        

    def fileClose(self):
        """
        Input: NA
        Returns: NA
        Description: Takes the parameters from the QDA, LDA, and SVM and puts it in a file and does the same with the processed training data.
        """
        file = open('letterXData2.csv', 'w')
        out = csv.writer(file, delimiter=',')
        for x in self.X:
            out.writerow(x)
        file.close()

        file = open('letterYData2.csv', 'w')
        out = csv.writer(file, delimiter=',')
        for y in self.Y:
            out.writerow(y)
        file.close()

